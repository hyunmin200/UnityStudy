Unity의 파이프 라인
Awake: 게임 오브젝트 생성할 때, 최초 실행
OnEnable: 게임 오브젝트가 활성화 되었을 때
Start: 업데이트 시작 직전, 최초 실행
FixedUpdate: 물리 연산 업데이트
고정된 실행 주기로 CPU를 많이 사용함
Update: 게임 로직 업데이트
환경에 따라 실행 주기가 떨어질 수 있음
LateUpdate: 모든 업데이트 끝난 후
OnDisable: 게임 오브젝트가 비활성화 되었을 때
OnDestroy: 게임 오브젝트가 삭제될 때

Vector

MoveTowards: 등속이동
Vector3.MoveTowards(현재위치, 목표위치, 속도)
마지막 매개변수에 비례하여 속도 증가함

SmoothDamp: 부드러운 감속 이동
Vector3.SmoothDamp(현재위치, 목표위치, 참조 속도, 속도)
마지막 매개변수에 반비례하여 속도 증가함

ref: 참조 접근 -> 실시간으로 바뀌는 값 적용 가능

Lerp: 선형보간, SmoothDamp보다 감속시간이 김
Vector3.SmoothDamp(현재위치, 목표위치, 속도)
마지막 매개변수에 비례하여 속도 증가함
(0~1)(최대값 1) 
마지막 값(속도)가 작을수록 속도가 느려짐

Slerp: 구면 선형 보간, 호를 그리며 이동
Vector3.Slerp(현재위치, 목표위치, 속도)


Time.DeltaTime
사용하는 방법
Translate : 백터에 곱하기
transform.Translate(Vec * Time.deltaTime);

Vector 함수 : 시간 매개변수에 곱하기
Vector3.Lerp(Vec1, Vec2, T * Time.deltaTime);

Time.deltaTime: 이전 프레임의 완료까지 걸린 시간

왜 사용하는가?
싸구려 컴퓨터 vs 최신형 컴퓨터
    10fps            60fps      이라고 할 때
컴퓨터의 성능에 따라 Translate의 이동반경이 달라짐
이러면 좀 불공평할 수 있다.

deltaTime의 값은 프레임이 적으면 크고, 프레임이 많으면 작음
그래서 프레임수가 크든 작든 화면에 나오는 값은 동일해 진다.

유니티안에서 해보기

중력 적용하기
RigidBody: 물리효과를 받기 위한 컴포넌트
RigidBody를 가지게 되면 중력의 영향을 받는다.

충돌 영역 정하기
Collider: 물리효과를 받기 위한 컴포넌트
(중력은 받지만 다른 물체와 부딪치지 못함)

RigidBody 설정
RigidBody -> Mess: 수치가 높을수록 충돌이 무거워짐(무게와 흡사함)
RigidBody -> Use Gravity: 중력 받는지를 결정
RigidBody -> Is Kinematic: 외부 물리 효과를 무시.
움직이는 함정을 만들 때 유용하다.

재질 만들기
Material: 오프젝트의 표면 재질을 결정하는 컴포넌트
Assets -> 우클릭 -> create -> Material
Albedo: 색상 편집 가능
재질 편집은 새로 생성해서 적용해야 가능
Metalic: 금속 재질 수치
Smoothness: 빛 반사 수치

Albedo 옆에 작은 네모박스에 Texture(재질에 들어가는 이미지)를 넣을 수 있다.

Tiling: 텍스쳐 반복 타일 개수
소수점으로 주면 소수만큼 텍스쳐가 잘려서 들어간다.
Emission: 텍스쳐 발광(밝기) 조절
Emission은 빛이 물리적으로 나오는건 아님

물리 재질 만들기
Assets -> 우클릭 -> create -> Physic Material
Physic Material: 탄성과 마찰을 다루는 물리적인 재질
만들고 Collider에 Material에 넣어주면 된다.

Bounciness: 탄성력, 높을수록 많이 튀어오름.
Bounciness Combine: 다음 탄성을 계산하는 방식

Friction: 마찰력, 낮을수록 많이 미끄러짐.
Static Friction: 정지했을 때 마찰력
Dynamic Friction: 움직일 때 마찰력
Friction Combine: 다음 마찰력을 계산하는 방식

만화적인 느낌을 내기 위해서는
Friction 합산은 최소로, Bounciness 합산은 최대로 하는 것이 좋다.

(현실과 비슷한)물체를 만드는 방법 4가지 필수 컴포넌트
Mesh, Material, Collider, RigidBody

힘을 이용하여 물체 움직여보기

GetComponent<T>(); : 자신의 T타입 컴포넌트를 가져옴
RigidBody는 2D버전이 따로 있기때문에
2D게임을 만들 때는 RigidBody2D를 써야한다.
예)
RigidBody rb;
rb = GetComponent<RigidBody>();

1. 물체 속도 설정
rb.velocity: 현재 이동속도
RigidBody는 물리현상에 대한 것이기 때문에
RigidBody관련 코드는 FixedUpdate에 작성하는 것이 좋다.

2. 물체에 힘을 가해서 움직이기
AddForce(Vec): Vec의 방향과 크기로 힘을 준다.
AddForce(Vec, ForceMode)
ForceMode: 힘을 주는 방식(가속, 무게 반영)
*Mess 무게 값이 클수록 움직이는데 더 많은 힘이 필요.
*AddForce의 힘 방향으로 계속 속도 velocity가 증가
*RigidBody를 사용한 이동은 생각보다 자연스러움

3.회전력을 주어 움직이기
rb.AddTorque(Vec): Vec방향을 축으로 회전력이 생기
*Vec를 축으로 삼기 때문에 이동 방향에 주의!

물리 충돌 이벤트

1. 물리 충돌 이벤트

오브젝트의 재질 접근은 MeshRenderer를 통해서 한다.
MeshRenderer mesh;
Material met;
//스타트 구문
mesh = GetComponect<MeshRenderer>();
mat = mesh.material;

OnCollisionEnter: 물리적 충돌이 시작할 때 호출되는 함수
OnCollisionExit: 물리적 충돌이 끝났을 때 호출되는 함수
OnCollisionStay: 물리적 충돌이 계속 될 때 호출되는 함수

mat.color = new Color(Color32) // 둘 중 하나
Color: 기본 색상 클래스
Color32: 255 색상 클래스

Color(1, 1, 1) 흰색
Color(0, 0 ,0) 검정

Collision: 충돌 정보 클래스
if(collision.gameObject.name == "게임 오브젝트 이름")
이런식으로 조건을 많이 준다.

2. 트리거 이벤트
일단 서론으로
투명한 재질을 만들고 싶다면
Rendering Mode를 TransParent로 바꾸고
Albedo에서 A(알파)값만 내려주면 된다.

트리거를 키기 위해서는
Collider에서 Is Trigger을 체크 해주면 된다.

충돌 체크를 할 때
OnCollision과 비슷하게 사용됨

OnTriggerEnter: 콜라이더가 충돌했을 때
OnTriggerStay: 콜라이더가 계속 충돌하고 있을 때 호줄
OnTriggerExit: 콜라이더와 충돌이 끝났을 때

Trigger는 물리적인 충돌이 아니라 콜라이더와 겹쳤나? 아닌가를 보는 것이다.
매개변수로 Collider를 받는다.
 
정리
//실제 물리적인 충돌로 발생하는 이벤트
void OnCollisionEnter(Collision collision) { }
void OnCollisionStay(Collision collision) { }
void OnCollisionExit(Collision collision) { }

//콜라이더 충돌로 발생하는 이벤트
void OnTriggerEnter(Collider other) { }
void OnTriggerStay(Collider other) { }
void OnTriggerExit(Collider other) { }

게임 인터페이스 UGUI 기초

1. 캔버스
Scene -> 우클릭 -> UI -> Canvas

Canvas: UI가 그려지는 도화지 역활인 컴포넌트

2. 스크린
위에 2d를 눌러서 보면 스크린이 보인다.

스크린: 게임이 표시되는 화면, 해상도로 크기 결정

유니티에는 좌표계가 2개가 있다.
World(카메라 O)
Screen(카메라 X) (마우스 커서도 스크린 좌표계에 포함)
나중에 자세히 찾아보기!

3. 텍스트 UI
Text: 문자열을 표시하는 UI
한글 지원이 된다.(TMP는 예외)
UI -> Legacy -> Text

상용적으로 팔 때
폰트는 꼭 라이센스를 확인!
배민 주아체 예쁘다..

글자가 짤린다면
Horizontal Overflow의 Wrap을 Overflow로 바꾸면 된다.
